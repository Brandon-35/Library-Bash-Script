#!/bin/bash

# ==============================================================
#  🚀 GIT COMMIT MESSAGE HOOK (Conventional Commits)
#  🔹 Check commit message before committing
#  🔹 Prevent incorrect format commits, making Git log more readable & consistent
# ==============================================================

# ✅ Valid commit structure:
# type(scope): subject
# <body> (optional)
# <footer> (optional)
#
# 🔹 Where:
# - `type`  (Required): Type of commit (feat, fix, chore, ...)
# - `scope` (Optional): Scope of changes (auth, api, database, ...)
# - `subject` (Required): Brief description of the changes (written in imperative mood)
#
# 📌 Example of a valid commit:
# feat(auth): implement JWT authentication
# fix(cart): fix checkout button not working
# docs(readme): update installation instructions

# ==============================================================
#  🔹 List of commit types (Type) + Meaning 🔹
# ==============================================================

COMMIT_TYPES=(
    "feat: ✨ Add a new feature"
    "fix: 🐛 Fix a bug"
    "docs: 📚 Documentation changes"
    "style: 🎨 Code style, formatting"
    "refactor: 🔧 Refactoring code"
    "test: 🧪 Adding tests"
    "chore: 🔨 Build tasks, dependencies"
    "build: 🏗 Build system changes"
    "perf: ⚡ Performance improvements"
    "ci: 🤖 CI configuration changes"
    "revert: ⏪ Revert changes"
)

# ==============================================================
#  🔹 Check commit message before committing 🔹
# ==============================================================

commit_msg_file="$1"

# Check if the commit is an automatic merge, skip format check
if grep -qE "^Merge branch" "$commit_msg_file"; then
    echo "🔄 Merge commit detected, skipping commit message validation."
    exit 0
fi

# Read commit message from file (the command git commit -m "..." will write here)
commit_msg=$(head -n1 "$commit_msg_file")

echo "🔍 Checking commit message: '$commit_msg'"

# Check if the commit is in the correct format
if ! echo "$commit_msg" | grep -Eq "^(feat|fix|docs|style|refactor|test|chore|build|perf|ci|revert)(\([a-zA-Z0-9/_-]+\))?: .+"; then
    echo -e "\n❌  ERROR: Commit message is not in the correct format!"
    echo -e "✅  Please use the format: type(scope): subject\n"
    
    echo "🔹 Valid commit types:"
    for commit_type in "${COMMIT_TYPES[@]}"; do
        echo -e "  - $commit_type"
    done
    
    echo -e "\n📌 Example of a correct commit:"
    echo "  feat(auth): implement JWT authentication"
    echo "  fix(cart): fix checkout button not working"
    echo "  docs(readme): update installation instructions"

    exit 1
fi

# If the commit is in the correct format, allow to proceed
exit 0
